Name: Will Luong 
Assignemnt 3. 


package asg3;

// receives: lastName (possibly has spaces in it), firstName(possibly has spaces in it), accountNumber(String - digits and lowercase letters exactly 6 chars for each accountNumber), balance(double - can be positive or negative), accountType(AccountType is an enumerated type that has only 3 possible values: CHECKING, SAVINGS, MONEY_MARKET), and businessType(BusinessType is an enumerated type that has only 3 possible values - PERSONAL, CORPORATE, LLC)
// return: attributes that would be tested in the given test program. 

public class BankAccount {
	public final static String DEFAULT_ACCOUNT_NUMBER ="xxxxxx"; 
	public final static String DEFAULT_NAME = "$$$$";
	private String lastName; 
	private String firstName; 
	private String accountNumber; 
	private double balance; 
	private AccountType accountType;
	private BusinessType businessType; 
	
	public BankAccount() 
	{ //// default constructor, creates a default BankAccount instance
		this.accountNumber = "xxxxxx"; 
		this.firstName = "$$$$"; 
		this.lastName = "$$$$"; 
		this.accountType = AccountType.CHECKING; 
		this.businessType = BusinessType.PERSONAL;
		
	}
	
	public BankAccount(String aAccountNumber, String aLastName, String aFirstName,AccountType aAccountType, BusinessType aBusinessType, double aBalance)
	{
		setLastName(aLastName); 
		setFirstName(aFirstName); 
		setAccountNumber(aAccountNumber); 
		setBalance(aBalance); 
		setAccountType(aAccountType); 
		setBusinessType(aBusinessType); 
		
	} //public method to set all the attributes. 
	
	public String toString() 
	{
		String retValue =""; 
		retValue += "The banking information is: " + this.lastName + " " + this.firstName + " " + this.accountNumber + " " + this.accountType + " " + this.balance + " " + this.businessType + " ";
		return retValue; 
		
	} //Creating a string from the attributes. 
	
	 public void setLastName(String aName)	 
	 {
		 aName = utils.MyUtils.properFormat(aName);
			
			if (aName.equals(""))
			{
				aName = DEFAULT_NAME; 
				this.lastName = aName; 

			}
			
			else 
			{
				this.lastName = aName; 

			}
		 
		 
	 } //Modifying the last name. 
	 
	 public void setFirstName(String aName)
	 {
		 aName = utils.MyUtils.properFormat(aName);
			
			if (aName.equals(""))
			{
				aName = DEFAULT_NAME; 
				this.firstName = aName; 

			}
			
			else 
			{
				this.firstName = aName; 

			} 
	 } //Modifying the first name. 
	 
	 public void setAccountNumber(String aAccountNumber)
	 {
		 boolean valid = true;  // check if 6 chars
			
			if (aAccountNumber.length()!= 6) 
			{
				valid = false;
			}
			
			else 
			{
				for (int i = 0; i < aAccountNumber.length(); i++ ) 
				{
					char ch = aAccountNumber.charAt(i);
					if(!Character.isLetterOrDigit(ch)) 
					{
						valid = false;
						break;
					}
				} // end of for loop. 
				

			}
			if (valid == true) 
			{
				this.accountNumber = aAccountNumber.toLowerCase();
				
			}
			
			else 
			{
				this.accountNumber = DEFAULT_ACCOUNT_NUMBER; 
						
			} 
			
	 } //End of account number handling. 
	 
	 
	 //Setter for each attributes. 
	 public void setBalance(double aBalance)
	 {
		 this.balance = aBalance; 
		 
	 }
	 
	 public void setAccountType(AccountType aType)
	 {
		 this.accountType = aType; 
	 }
	
	 public void setBusinessType(BusinessType aType)
	 {
		 this.businessType = aType; 
		 
	 }
	
	 
	 //Getter to access each mentioned attributes from the given test program. 
	 public String getFirstName()
	 {
		 return this.firstName;
		 
	 }
	 
	 public String getLastName() 
	 {
		 return this.lastName;
		 
	 }
	 
	 public String getAccountNumber()
	 {
		 return this.accountNumber;
		 
	 }
	 
	 public double getBalance() 
	 {
		 return this.balance;
		 
		 
	 }
	 
	 public AccountType  getAccountType()
	 {
		 return this.accountType; 
		 
	 }
	 
	 public BusinessType getBusinessType()
	 {
		 return this.businessType; 
		 
		 
	 }
	 

	 
} //End of BankAccount class. 



// Reading and writing to a text file. 
package asg3;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class BankAccountUtilsImpl 
{
	// receives:  inFile - a Scanner instance that is open and ready to read data from
	 //     file format: account number {newline} last name {newline} first name {newline},
	 //                  account type {space} business type {newLine} balance {newline}
	 // returns:  a single populated BankAccount instance with data from inFile if all data is there,
	 //      returns null if no data found (end of input) for a bank account or if
	 //     any mismatch of data or missing expected data
	 public static BankAccount readFromScanner(Scanner inFile)
	 {
		String accNumber = ""; 
		String lname = ""; 
		String fname = "";
		double baLance = 0.0; 
		String accType = "";  
		String busType="";  
		 
		 if (inFile.hasNext()) 
		 {
			 accNumber = inFile.nextLine().trim(); // reading the first line in the text file. 
			 
		 }
		 
		 else
		 {
			 return null; 
		 }
		 
		 if(inFile.hasNext()) 
		 {
			 lname = inFile.nextLine().trim(); // reading the next line from the text file. 
			 
		 }
		 
		 else
		 {
			 return null; 
		 }
		 
		 
		 if(inFile.hasNext()) 
		 {
			 fname = inFile.nextLine().trim(); // so on... 
			 
		 }
		 
		 else
		 {
			 return null; 
			 
		 }
		 
		 if(inFile.hasNext())
		 {
			 accType = inFile.next().trim();
			 
		 }
		 
		 else
		 {
			 return null; 
			 
		 }
		 
		 if(inFile.hasNext()) 
		 {
			 busType = inFile.nextLine().trim(); 
			 
			 
		 }
		 
		 else
		 {
			 return null;
			 
		 }
		 
		 if(inFile.hasNextDouble()) 
		 {
			 baLance = inFile.nextDouble(); // reading until the next double in the text file. 
			 inFile.nextLine();  // after reading through the double, move on to the next line in the file. 
		 }
		 
		 
		 else
		 {
			 return null; 
		 }
		 
			
		BankAccount account = new BankAccount(accNumber, lname, fname, AccountType.valueOf(accType), BusinessType.valueOf(busType), baLance);
		return account;
		 
	 } // end of reading to the file 
	 
	 // receives: outFile- a PrintWriter instance that is already open and ready to receive output
	 //           bankAccount - the instance of a bankAccount that is to be written to the output
	 // task: received bankAccount is written to outFile in  readable format by readFromScanner method
	 //       (so that it could be read back in later)
	 //writes in exact same order and format as readFromScanner uses:
	 //    file format:  account number {newline} 
	 //                  last name {newline} 
	 //                  first name {newline},
	 //                  account type {space} business type {newLine} 
	 //                  balance {newline} 
	 
	 public static void writeToFile(PrintWriter outFile, BankAccount bankAccount) 
	 {
		 outFile.println(bankAccount.getAccountNumber());   
		 outFile.println(bankAccount.getLastName());
		 outFile.println(bankAccount.getFirstName());
		 outFile.println(bankAccount.getAccountType()+" "+bankAccount.getBusinessType());
		 outFile.println(bankAccount.getBalance());
		 
	 } // end of writing the text file. 
	

} //End of the program. 


Enter your name: will 
Execution Begin  at: 2018-09-23 15:35:48
Bank Account Test for: Will
SUCCESS expected xxxxxx
SUCCESS expected $$$$
SUCCESS expected $$$$
SUCCESS expected CHECKING
SUCCESS expected PERSONAL
SUCCESS expected kkdd22
SUCCESS expected Jones
SUCCESS expected Matthew
SUCCESS expected CHECKING
SUCCESS expected PERSONAL
SUCCESS expected 100.0
SUCCESS expected 111111
SUCCESS expected Lopez Garza
SUCCESS expected Susan
SUCCESS expected SAVINGS
SUCCESS expected LLC
SUCCESS expected 50.0
Now testing setters....
SUCCESS expected kkk222
SUCCESS expected xxxxxx
SUCCESS expected xxxxxx
SUCCESS expected Lopez Martin
SUCCESS expected $$$$
SUCCESS expected $$$$
SUCCESS expected $$$$
SUCCESS expected Ann Marie
SUCCESS expected SAVINGS
SUCCESS expected MONEY_MARKET
SUCCESS expected CORPORATE
SUCCESS expected LLC
SUCCESS expected PERSONAL
SUCCESS expected 100.0
SUCCESS expected -100.0
SUCCESS expected 0
toString() of b1: The banking information is: $$$$ Ann Marie xxxxxx MONEY_MARKET -100.0 PERSONAL 
Now Testing 2nd constructor for BankAccount class
SUCCESS expected Jones Smiley
SUCCESS expected Amy
SUCCESS expected 8899df
SUCCESS expected 100.0
SUCCESS expected CORPORATE
SUCCESS expected MONEY_MARKET
SUCCESS expected $$$$
SUCCESS expected Kim Ann
SUCCESS expected xxxxxx
SUCCESS expected -100.0
SUCCESS expected LLC
SUCCESS expected SAVINGS

***** now testing toString(); 
toString() of someAct: The banking information is: Lawrence Bob aabb12 CHECKING 100.0 LLC 
SUCCESS expected aabb12 to be part of toString() of someAct
SUCCESS expected Bob to be part of toString() of someAct
SUCCESS expected Lawrence to be part of toString() of someAct
SUCCESS expected 100. to be part of toString() of someAct
SUCCESS expected CHECKING to be part of toString() of someAct
SUCCESS expected LLC to be part of toString() of someAct
SUCCESS expected 0 newLines to be in toString() of someAct

********Now Testing readFromScanner in BankAccountUtilsImpl********
****Output of bankaccountEmpty.txt:
****Output of bankaccount1.txt:
bank account:  The banking information is: Martinez Gomez Anna Lisa Maria 300rre CHECKING 300.0 CORPORATE 
****Output of bankaccount.txt:
bank account:  The banking information is: Howard William Rogers a500bc CHECKING -50.0 PERSONAL 
bank account:  The banking information is: Jones Linda Marie y200cs SAVINGS 200.0 LLC 
bank account:  The banking information is: Lopez Martinez Robert James r2100d MONEY_MARKET 1000.0 CORPORATE 
bank account:  The banking information is: Speith Jordan pzg400 SAVINGS 400000.0 LLC 
bank account:  The banking information is: Martinez Gomez Anna Lisa Maria 300rre CHECKING 300.0 CORPORATE 

*******Now testing that writeToFile method worked...********
****Output of out1.txt should be a copy of bankaccount.txt:****
bank account:  The banking information is: Howard William Rogers a500bc CHECKING -50.0 PERSONAL 
bank account:  The banking information is: Jones Linda Marie y200cs SAVINGS 200.0 LLC 
bank account:  The banking information is: Lopez Martinez Robert James r2100d MONEY_MARKET 1000.0 CORPORATE 
bank account:  The banking information is: Speith Jordan pzg400 SAVINGS 400000.0 LLC 
bank account:  The banking information is: Martinez Gomez Anna Lisa Maria 300rre CHECKING 300.0 CORPORATE 
****Output of bankaccountError.txt:
SUCCESS -- Correctly finding error in file: bankaccountError.txt
SUCCESS -- Correctly finding error in file: bankaccountError.txt
Ending Bank Account Test for: Will
Execution End  at: 2018-09-23 15:35:48

